Youtube playlist of CodeVault explaining important notions we encounter in the projet (and more):
https://www.youtube.com/playlist?list=PLfqABt5AS4FkW5mOn2Tn9ZZLLDwA3kZUY
https://www.youtube.com/watch?v=QD9YKSg3wCc&list=PLK4FY1IoDcHG-jUt93Cl7n7XLQDZ0q7Tv


Global C ressources:
https://devdocs.io/c/


https://www.codequoi.com/pipe-une-methode-de-communication-inter-processus/
https://www.codequoi.com/errno-et-la-gestion-derreur-en-c/
https://www.codequoi.com/creer-et-tuer-des-processus-fils-en-c/


https://explainshell.com/explain?cmd=cat+%7C+cat+%7C+ls <<< faire joujou avec ca
https://ruslanspivak.com/lsbasi-part1/


42 pipex projet ressources : a regarder en dernier
Le but est quand meme de comprendre les process dans leur ensemble et pas seulement pour le rendu 42.
Neanmoins, explication des fonctions autorisé dans le projet qui facilite la recherche de notions externe au projet.


https://reactive.so/post/42-a-comprehensive-guide-to-pipex/
https://csnotes.medium.com/pipex-tutorial-42-project-4469f5dd5901
https://medium.com/@omimouni33/pipex-the-42-project-understanding-pipelines-in-c-71984b3f2103	
https://medium.com/@lannur-s/pipex-42-chapter-1-metamorphosis-execve-1a4710ab8cb1


Partie bonus (heredoc):
https://linuxize.com/post/bash-heredoc/
https://phoenixnap.com/kb/bash-heredoc


Norme ANSI:
https://cyber.gouv.fr/sites/default/files/2020/07/anssi-guide-regles_de_programmation_pour_le_developpement_securise_de_logiciels_en_langage_c-v1.4.pdf

Garbage Collector: Pas sur de savoir si je veux en faire un
https://maplant.com/2020-04-25-Writing-a-Simple-Garbage-Collector-in-C.html
https://github.com/ivmai/bdwgc





TYPE pid_t documentation:

pid_t est un type de donnee utilise pour reprensenter les ID de processus, c'est un entier signé.
Garantit une portabilite entre systemes UNIX, peu importe la taille reele du PID sur le systeme.

Utilité : Retour de fork() et getpid() -> stockage des PID (process ID) parents/enfants
Argument pour : waitpid() ou kill()

Sources:

https://pubs.opengroup.org/onlinepubs/009695399/basedefs/sys/types.h.html
https://stackoverflow.com/questions/29984328/difference-between-unistd-h-and-sys-types-h-in-linux > https://pubs.opengroup.org/onlinepubs/7908799/xsh/unistd.h.html > https://pubs.opengroup.org/onlinepubs/7908799/xsh/tcgetpgrp.html




~~Recuperer valeur du bon enfant -> waitpid~~ je sais pas ce que ca fait la


dup et dup2:

dup(oldfd): MAN = https://linux.die.net/man/2/dup
dup permet de creer une copie sur le plus petit fd disponible, il retourne le nouveau fd.

dup2(oldfd, newfd): MAN = https://linux.die.net/man/2/dup2
dup2 force la copie sur le fd specifié et ferme newfd sil existe deja.
Il est plus precis car on controle la destination.
Utilisation lié avec open() vers le fd voulu (redirection de process depuis le terminal vers un fd).
Lorsque l'on utilise dup2(), meme si le newfd est fermé.
La copie est en realité sur le fd qui pointe vers newfd (exemple utilisation printf avec dup2 remplacant STDOUT_FILENO vers fd).
Analogie: Avoir deux clefs pour une meme serrure, si on jete une clef, l'autre fonctionne toujours.


Difference principale:
dup2 permet de choisir le numero du newfd tandis que dup le choisit automatiquement.
dup2 est preferable pour pipex car il permet de controler les redirections des entrees/sorties (STDIN_FILENO ou STDOUT_FILENO)
dup ne peut pas garantir cette redirection vers le fd choisit (operation demandé par la reproduction du comportement des pipes shell).


access:

access(pathname, mode): MAN = https://linux.die.net/man/2/access
verifie si un process a les permissions daccess a un fd/directory et return 0 si OK, -1 si erreur
prend deux arguments: le chemin dun fd/directory ainsi que le mode representant le type daccess verifié (utilise des contantes).


Modes principaux:
F_OK:existence du fichier
R_OK: permission lecture
W_OK: permission ecriture
X_OK: permission execution

Les trois derniers verifient aussi implicitement F_OK

execve:

execve(pathname, av, env)

execve est un appel system qui permet lexecution un programme au sein de notre program. Il remplace l

NULL en parametre denv : on peut mettre NULL en parametre a execve a la place de la variable denvironnement si on ce trouve dans un process enfant.
La fonction reconnaitra al


COMPRENDRE LIMAGE DUN PROCESSUS:
- Un process, lorsqu'il est execute par l'OS, possede une 'image' en memoire. 
- Cette image comprend tout ce qui est necessaire a lexecution dun programme.
-- Le code executable: les instructions du programme, telles quelles sont lues a partir dun fichier binaire.
-- Les segments de donnees:

- Statique : global variable, constantes...
- Dynamique (heap) : Memoire allouee dynamiquement avec malloc etc.

--- La pile (stack): Utilise pour les appels fonctions, variables locales etc
---- Les FD: les info sur les fichiers ouverts par le process.
----- Conxtexte dexecution: Registres du CPU, pointeur d'instruction...

En resume, l'image d'un process est tout ce qui constitue son etat et permet son execution.
L'image d'un process est abstraite. Elle est la reflection dun programme en cours dexecution par l'OS. 
Lorsque execve est appelé, lancien programme disparait completement en memoire mais le PID reste le meme. 
Il n'y a pas creation de nouveau processus

Que ce passe-t-il lorsque execve est appelé:
- On remplace l'image du process courant (suppression des donnees) par une nouvelle image actualisée (basé sur le fichier binaire du programme specifié).
- On garde en memoire le PID neanmoins!
- On execute le nouveau programme en fonction du point dentrée.

execve permet dexectuter un autre programme dans le meme processus, tout en laissant les ressources intacts (si configurer pour persister).







Minishell ?:
https://www.youtube.com/watch?v=yTR00r8vBH8


Minishell:
https://www.cs.purdue.edu/homes/grr/SystemsProgrammingBook/Book/Chapter5-WritingYourOwnShell.pdf
https://whimsical.com/minishell-architecture-big-picture-7b9N8PL3qHrddbs977mQ2J

Quelques rendus avec erreurs (voir les pushs invalidés):
https://projects.intra.42.fr/1331/aascedu
https://projects.intra.42.fr/projects/42cursus-minishell/projects_users/3658701
https://projects.intra.42.fr/projects/42cursus-minishell/projects_users/3676106
